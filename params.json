{"name":"Request-control","tagline":"Fight back against the rising tide of http requests.","body":"<a href=\"https://github.com/cobbdb/request-control\">\r\n    <img alt=\"logo\" src=\"http://i.imgur.com/xrtq29k.png\" width=\"300\">\r\n</a>\r\n\r\n[![Bower version](https://badge.fury.io/bo/request-control.svg)](http://badge.fury.io/bo/request-control) [![NPM version](https://badge.fury.io/js/request-control-js.svg)](http://badge.fury.io/js/request-control-js)\r\n\r\nThrottle aggressive 3rd party http requests.\r\n\r\n    $ bower install request-control\r\n    $ npm install request-control-js\r\n\r\n-------------\r\nAs viewability becomes the gold standard in advertising metrics, many vendors are\r\nhungry for related data. Unfortunately, some programatic and remnant creatives\r\ncan end up plaguing your site with a relentless flow of http requests - especially\r\nfrom video ads.\r\n\r\nRequest Control provides you a throttle to take back control of your site performance\r\nand enforce a speed limit on http requests per second.\r\n\r\n***Will this interfere with other site content?***\r\nDefinitely not. Throttling does not engage for the top window context by default - this means only your site's iframes will be affected. There is also a (configurable) grace period of 100 requests before the throttle will kick in, meaning your standard site content will be unaffected.\r\n\r\n***Won't this interfere with revenue from video remnants?***\r\nNope! Since this is only a throttle, video metrics will still be reported from video ads - just at a more sane rate. Once the throttle kicks in, only 1 out of every N (configurable) requests per second will be made.\r\n\r\nRequest Control is intended to throttle malicious reporting - which may make upwards of 10 http requests per second! At roughly 100KB per request this can add up to some *very* expensive site visits for your mobile customers.\r\n\r\n### Using the Throttle\r\nTo load Request Control on your site, simply include the built script from `dist/reqctrl.min.js` and then start the throttle when you're ready to enforce a request speed limit. Request Control will automatically reapply the throttle when possible in any iframes for you.\r\n\r\nYou can install the JS global object with `bower install request-control`.\r\n```html\r\n<script src=\"path/to/reqctrl.min.js\"></script>\r\n<script>\r\n    RequestControl();\r\n</script>\r\n```\r\n\r\nRequest Control is also provided as a CommonJS module with `npm install request-control-js`.\r\n```javascript\r\nvar Throttle = require('request-control-js');\r\nThrottle();\r\n```\r\n\r\n### Configuration\r\nTo better tune the throttle for your site, there are a few options you can customize.\r\n\r\n##### throttle\r\n**{Number}** This is the time in milliseconds to enfore between successive http requests.\r\n```javascript\r\nRequestControl({\r\n    throttle: 4000\r\n});\r\n```\r\n\r\n##### grace\r\n**{Number}** Number of requests to allow before engaging the throttle.\r\n```javascript\r\nRequestControl({\r\n    grace: 50\r\n});\r\n```\r\n\r\n##### top\r\n**{Boolean}** True to throttle the top window as well as iframes.\r\n```javascript\r\nRequestControl({\r\n    top: true\r\n});\r\n```\r\n\r\n##### log\r\n**{Boolean}** True to enable logging. Lumberjack logs with [Lumberjack](http://cobbdb.github.io/lumberjack/)\r\nto 4 channels: `summary`, `image`, `ajax`, `append`.\r\n```javascript\r\nRequestControl({\r\n    log: true\r\n});\r\n```\r\n\r\n### Debugging your Site\r\nRequest Control features logging and DOM element highlighting to help you find those\r\nproblem areas on your site. Just open the JavaScript console in your browser\r\nand set the `rcDebug` variable in the **top window**.\r\n```javascript\r\n// Enable basic highlighting and request summary reports.\r\n> rcDebug = true;\r\n\r\n// Print a detailed report of network activity.\r\n// Available reports are: image, ajax, append. You can request reports for\r\n// any of these. For example, to get only image and ajax reports:\r\n> RequestControl.log.report('image ajax');\r\n```\r\n\r\n### Stopping the Throttle\r\nAfter the throttle has been started, you can turn it off with the callable that is\r\nreturned when you first started the system.\r\n```javascript\r\n// Start the throttle.\r\nvar halt = RequestControl();\r\n\r\n// Some time later, stop the throttle.\r\nhalt();\r\n```\r\n\r\n---------\r\n* See: http://cobbdb.github.io/request-control\r\n* See: http://github.com/cobbdb/request-control\r\n* License: MIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}